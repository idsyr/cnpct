#+TITLE:Базовый курс C++ (MIPT, ILab). Lecture 10. Языки и грамматики
#+AUTHOR: idsyr
#+DESCRIPTION: B1
#+STARTUP: showeveryhing
#+OPTIONS: toc:2


* Вспоминаем лексеры
- CMake для Flex
#+begin_src cmake
    cmake_minimum_required(VERSION 3.13.4)
    project(numlex)
    
    # если установлен в традиционном месте то найдет сам
    # dflex_dir
    find_package(FLEX REQUIRED)

    flex_target( scanner
        numlex.l
        ${CMAKE_CURRENT_BINARY_DIR}/lexer.cc
    ) 
 
    add_exucutable( ${PROJECT_NAME}
        numlex.cc
        ${FLEX_scanner_OUTPUTS}
    )
    
    target_compile_features(${PROJECT_NAME} PRIVATE cxx_std_20)
    target_include_directories(${PROJECT_NAME} PRIVATE ${CMAKE_CURRENT_BINARY_DIR})
    target_include_directories(${PROJECT_NAME} PRIVATE, ${CMAKE_CURRENT_SOURCE_DIR}) 
#+end_src
- Последовательность открывающих и зкарывающих скобок - Лексер разобьет ее на поток лексем, но не ответит на вопрос правильна ли закрыта эта последовательность или неправильно 


* Грамматики
** Грамматика регулярных выражений
- Для того чтобы писать грамматики мы вводим два вида сущностей
    - Терминальные символы   - настоящие символы
    - Нетерминальные символы - воображаемые символы
- По определению грамматика состоит из продукций a -> b
    - A -> A+A|(A)|A.A|A*|a|b|c
- Нетерминальные символы в общем случае могут стоять и слева и справа, терминальные только справа
- Для языка регулярных выражений над {a,b,c}
- Терминалы: a, b, c, +, (, ), *
- Нетерминалы: пока только А.
- Во всех продукциях языка регулярных выражений у нас всего один нетерминал
- В контекстно свободной только один нетерминал слева



** Контекстная свобода и зависимость
- Контекстно свободной грамматикой называется такая, которую можно представить так, что слева в каждой продукции был ровно один нетерминал
- Интуитивно это означает, что "if везде if"
- Любой регулярный язык тривиально является контекстно свободным
- Язык L4={AmBnCAmBn} не является контекстно свободным
- Контекстно свободный язык эквивалентен автомату с магазинной памятью (естественному обобщению обычного автомата)
- Те свойства, которые в контекстно свободных грамматиках не проверяются называются семантическими (проверяются на семантическом анализе)
- Почему мы не хотим описать язык контекстно свободной грамматикой? -> мы хотим решить для контекстно свободной грамматики проблему принадлежности (построить дерево вывода, алогоритм кока-янгера-косами), для контекстно зависимых грамматик гораздо более сложные алгоритмы.
- Поэтому мы делаем так: сам язык мы описываем контексто свободные грамматикой, простые свойства языка (например как именно формируются лексемы) - мы описываем регулярными выражениями. Контекстно зависимые грамматики мы вообще никогда не пишем, вместо этого мы берем построенное синтаксическое дерево и делаем над ним семантический анализ.
- Должно связаться в голове что у нас есть: 
  - Лексические проверки, они соответствуют регулярным выражениям
  - Синтаксические проверки, они соответствуют контекстно свободным грамматикам
  - Семантические проверки, которые возникают там где у нас возникает контекстная зависимость


** Автоматы с магазинной памятью 
- Контекстно свободные грамматики хороши тем что они соответствуют АМП
- Pushdown automata это обычный недерменированный автомат, к которому добавлен стек
- Переход делается по входному символу и по стековому символу
- При этом при переходе можно запушить или извлечь символ



* Вывод и неоднозначность
** Грамматика: неоднозначность
- Мы говорим, что в данной грамматике выражения бывают выводимые и нет
- Обратим внимание, что у на с есть две естественные стреатегии вывода: брать самый левый или самый правый нетерминал на каждом шаге
- Мы можем задаться левым или правым выводом и если он единственный, у нас все хорощо (канонический правый)
- А вот если нет, то грамматика неоднозначна
- Левый вывод задает синтаксическое дерево
- Если у нас есть два левых вывода то это значит что у нас для одного и того же выражения есть два синтаксических дерева
** Грамматика: приоритеты операций
- Добавив нетерминалов мы получаем приоритеты у операций
#+begin_src misterios_symbols_set
A -> B+A|B
B -> C.B|C
C -> D*|D
D -> (A)|E
E -> a|b|c
#+end_src
- Строчка a + bc имеет по сути единственный вывод с точностью до порядка выбора продукций
- Логично выбирать продукцию либо для самого левого нетерминала либо для самого правого (leftmost/rightmost)
- Заметим также, что эта грамматика факторизована слева, у нее нет продукций вида A -> Aa (При левом выводе чревато бесконечным циклом)


** Таксономия L/R
- Первая буква означает направление
  - L означает слева направо
  - R означает справа налево
- Вторая буква означает выбранный нетерминал (начиная с которого происходит определение)
  - L означает берем самый левый
  - R означает берем самый правый
- Далее могут следовать скобки в которых стоит несколько символов предпросматриваем
- Есть также префиксы например LALR (LA = look ahead)
- Мы можем формулировать вопросы про языки в терминах их классов


* Рекурсивный спуск LL(k)
- Первая главная проблема нисходящего разбора: может понадобиться откат если первая продукция выбрана неудачно
- Во всех промышленно компиляторах которые сейчас существуют в мире используется он 

* Парсер для LL(1)
- Можем ли мы построить парсер без откатов?
- Да, но не для всех грамматик
- Рассмотрим следующую грамматику арифметических выражений:
#+begin_src text
E -> E+T|T
T -> T*F|F
F -> (E)|id
#+end_src
- Понятно ли почему тут LL(1) не получится?
** Ограничения на LL(1)
- Можно доказать, что язык относится к LL(1) если и только если для двух разных продукций A -> a и A -> b
  - В FIRST множествеe у них ничего не повторяется
  - Только одна из них выводит пустую строку
  - Если b выводит пустую строку, то a не выводит строк из FOLLOW(A)
- LL1 это строгий o(n)
- Классический пример неоднозначности не позводяющий построить LL(1) парсер это dangling else

* Восходящий разбор и bison 
** Восходящий парсинг LR(k)
- Восходящий разбор основан на двух операциях
  - shift - сдвинуть текущий элемент входного потока в стек
  - reduce - использовать продукцию чтобы изменить содержимое стека на терминал слева от продукции
- Главная хитрость этого метода когда делать shift и когда reduce
- Для принятия этого решения сначала строятся first/follow, потом для них строится LR(0) автомат
- Все это техничекски сложные действия, которые проще автоматизировать

