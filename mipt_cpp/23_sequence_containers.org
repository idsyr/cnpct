#+title: Базовый курс C++ (MIPT, ILab). Lecture 23. Последовательные контейнеры.
#+author: idsyr


* Начало
** Последовательные контейнеры
- Контейнеры
  - vector - массив с переменным размером и гарантией непрерывности памяти
  - array - массив с фиксированным размером, известным в момент компиляции
  - deque - массив с переменным размером без гарантий по памяти
  - list - двусвязный список
  - forward_list - односвязный список
- Адаптеры
  - stack - LIFO контейнер, чаще всего на базе deque
  - queue - FIFO контейнер, чаще всего на базе deque
  - priority_queue - очередь с приоритетами, чаще всего на базе vector

* Деки
** Что может смущать в этом коде?
#+begin_src cpp
  std::deque<int> d;
  for(int i = 0; i != N; ++i) {
    d.push_front(i);
    d.push_back(i);
  }
#+end_src
- deque - массив с переменным размером без гарантий по памяти
- Поэтому ответ: все хорошо
- Вставка в начало и в конец дека имеет всегда честную константную сложность O(1)

** Рассмотрите deque вместо vector
- Эффективно растет в обоих направлениях
- Не требует больших реаллокаций с перемещениями, так как разбит на блоки
- Гораздо меньше фрагментирует кучу

** Деки против векторов
| Вектора | Деки |
|Есть гарантии по памяти|Нет гарантий|
|Вставка в конец O(1)+|Вставка в конец O(1)|
|Вставка в начало O(N)|Вставка в начало O(1)|
|Есть reserve / capacity| Нет необходимости|

** Обсуждение
- "deque is the data structure of choice when most insertions and deletions take place at the beggining at the end of the the sequence"

* Списки
** Узловые контейнеры
- *deque* произвольный доступ, быстрая вставка в начало и в конец
- *forward_list* последоватльный доступ, быстрая вставка в любое место
- *list* последовательный доступ, быстрая вставка в любое место, итерация в обе стороны
** Сплайс для списков: простая форма
#+begin_src c++
  forward_list<int> fst = {1, 2, 3};
  forward_list<int> snd = {10, 20, 30};
  // перемещаем second в начало first, it указывает на 1
  fst.splice_after(fst.before_begin(), snd);
#+end_src
** Сплайс для списков: сложная форма
#+begin_src cpp
snd.splice_after(snd.before_begin(), fst, fst.begin(), it);
#+end_src
** Сплайс для списков: среднаяя форма
#+begin_src cpp
fst.splice_after(fst.before_begin(), snd, snd.begin()); 
#+end_src
* Адаптеры
** Виды адаптеров
- *stack* - LIFO стек над последовательным контейнером
#+begin_src cpp
  template <class T, class Container = deque<T> > class stack;
#+end_src
- *queue* - FIFO очередь над последовательным контейнером
#+begin_src cpp
  template <class T, class Container = deque<T> > class queue;
#+end_src
- *priority_queue* - очередь с приоритетами (как binary heap) над последовательным контейнером
#+begin_src cpp
  template <class T, class Container = vector<T>, class Compare = less<typenmae Continer::value_type>> class priority_queue;
#+end_src
* Case study: алгоритм Прима
#+begin_src cpp
    pq.push(std::make_pair(first(G), src));
    while(!pq.empty()) {
      auto elt = pq.top().second; pq.pop();
      if(mst[elt]) continue;
      for(auto e: adjacent(G, eld)) {
        w = weight(G, e); v = tip(G, e);
        if(!mst[elt] && key[v] < w) {
          key[v] = w; parent[v] = u;
          pq.push(std::make_pair(w, v));
        }
      }
    }
#+end_src
* Ортогональность адаптеров
** Защита от ортогональности
#+begin_src cpp
  std::stack<int> s; // ok, это stack<int, deque<int>>
  std::stack<int, std::vector<long>> s1; // сомнительно
  std::stack<int, std::vector<char>> s2; // совсем плохо
  s2.push(1000);
#+end_src
- перекрыто static asserts
** Недостаточная ортогональность
#+begin_src cpp
  std::stack<int, std::forward_list<int>> s;
  s.push(100);
  s.pop();
  s.top();
#+end_src
- Эти ошибки неочевидны
- Стек вполне может быть сделан на односвязном списке
- Но адаптер std::stack требует (неявно требует) вполне определенный интерфейс
* Маски
** Коротко о битовых масках
- bitset это альтернатива array<bool> то есть у него фиксированный размер, являющийся параметром контейнера
- При этом он хранит данные более компактно (как vector<bool)
* Строки
- Почему специальный std::string а не vector<char>?
- Важная ремарка: формально std::string это непрерывный контейнер, имеющий с вектором много общего
** Строки: базовая функциональность
#+begin_src cpp
  #include <cstring>
  #include <cassert>
  char astr[] = "hello";
  char bstr[15];
  int alen = std::strlen(astr);
  assert(alen == 5);
  std::strcpy(bstr, astr);
  std::strcar(bstr, ", world!");
  res = std::strcmp(astr, bstr);
  assert(res < 0);
  foo(bstr);
#+end_src

#+begin_src cpp
  #include <string>
  using std::string;
  string astr = "hello";
  string bstr;
  int alen = astr.length();
  assert(alen == 5);
  bstr = astr;
  bstr += ", world!";
  res = astr.compare(bstr);
  assert(res < 0);
  foo(bstr.c_str()); 
#+end_src
** Характеристики типов
- Есть много вопросов, ответы на которые разные для разных строк с разными типами символов. Разумено свести все это в класс
#+begin_src cpp
  template <typename CharT> class char_traits;
#+end_src
- Основные методы:
- assign, eq, lt, move, compare, find, eof, ...
#+begin_src cpp
  template <typename CharT, typename Traits = std::char_traits<CharT>> class basic_string {
#+end_src
- К слову, а является ли способ выделения памяти характеристикой символа?
** Аллокаторы
- Выделение памяти абстрагирует аллокатор. Стандартный аллокатор сводится к malloc
#+begin_src cpp
template <typename CharT, typename Traits = std::char_traits<CharT>, typename Allocator = std::allocator<CharT>> class basic_string { .... }
#+end_src
- К слову, полный шаблон вектора тоже выглядит не вполне очевидно
#+begin_src cpp
template <typename T, typename Allocator = std::allocator<T>> class vector { .... }
#+end_src
** Обсуждение
- Следуещие вопросы не слишком логически связаны
- Как по вашему выглядит аллокатор для std::list
- Как вы думаете, строка должна иметь методы вроде reserve и capacity
- Ну и раз уж мы вынесли строку в отдельный класс, что вы думаете о специальных интерфейсах для нее
** Поиск в строках
- Строки предлагают эффективные специальные возможности поиска в них
#+begin_src cpp
  string s = "Hello";
  unsigned long notfound = s.find("bye");
  assert(notfound == std::string::npos);

  unsigned long ellp = s.find("ell");
  unsigned long hpos = s.find("H", ellp);
  assert(hpos == std::string::npos);
#+end_src
- Но использование этих возможностей таит сюрпризы
- long в linux чтобы туда влезал ptr
- В win он 32b
- Поэтому: using szt = std::string::size_type

* string_view
** Проблема статических строк
#+begin_src cpp
  static const std::string kName = "qwerty"; // heap indirection
  // ok ->
  const char kName[] = "qwerty";
  int foo(const std::string &arg); // temp ->
  foo(kName); 
#+end_src
** Решение: string_view (C++17)
string_view это невладеющий указатель на строку
#+begin_src cpp
  static std::string_view kName = "qwerty";
  int foo(std::string_view arg);
  foo(kName);
#+end_src
** Базовые операции над string_view
- remove_prefix
- remove_suffix
- copy
- substr
- compare
- find
- data
* Отображения
** Смысл ассоциативности
- Вектора индексированы целыми числами и позволяют сопоставить целое число хранимому значению
#+begin_src cpp
vector<T> v; // -> T
#+end_src
- как сделать произвольное отображение T -> U?
** Ассоциативный массив
- Основная идея ассоциативного массива это контейнер unordered map
#+begin_src cpp
  template <typename Key, typename T, typename Hash = std::hash<Key>, typename KeyEqual = std::std::equal_to<Key>, typename Allocator = std::allocator<std::pair<const Key, T>>> class unordered_map;
#+end_src
- Здесь важными являются дав отношения: отношение equals и собственно hash функция
- При этом ключи уникальны и мы можем менять значения но не ключи
* Собственный ключ
** Обсуждение: собственный ключ
- Допустим у нас есть пользовательская структура из двух строк
  #+begin_src cpp
    struct S { std::string first_name, lase_name; };
    std::unordered_map<S, std::string> Ump;
  #+end_src
- Для нее нужно сделать две вещи
  - Определить равенство
  - Определить хеш
- Обратите внимание: мы можем добавлять в стандартную библиотеку специализации
#+begin_src cpp
  namespace std {
    template <> struct hash<S> {
      std::size_t operator() (const S& K) const {
        std::hash<std::string> h;
        auto h1 = h(s.first_name), h2 = h(s.last_name);
        return h1 ^ (h2 << 1);
      }
    }
  };
#+end_src
- Часто (например в этом случае) он даже работает
** Собственный hash
- УЖЕ есть решение
#+begin_src cpp
  size_t seed = 0;
  boost::hash_combine(seed, h1);
  boost::hash_combine(seed, h2);
  return seed;
#+end_src
* Классы эквивалентности
** Требования к предикату сравнения
- Общая концепция называется strict weak oredering
- Она включает
  - антисимметричность: pred(x, y) -> !pred(y, x)
  - транзитивность: pred(x, y) && pred(y, z) -> pred(x, z)
  - иррефлексивность: !pred(x, x)
  - транзитивность эквивалентности: eq(x, y) == !pred(x, y) && !pred(y, x) |- eq(x, y) && eq(y,z) -> eq(x, z)
  - Она же распространяется на предикаты в алгоритмах сортировки и т.д.




