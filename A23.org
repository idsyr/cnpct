#+TITLE: Семинар 6.4. Представление плавающих чисел и ассемблер x86 
#+AUTHOR: idsyr
#+STARTUP: showeverything 
#+OPTIONS: toc:2



* Вещественные числа (00:00)
- Вещественное число - функция которая выдает разряд за разрядом (соот. системе счисления)
- Большая часть ВЧ непредставимо сложны, не могут быть представлены программами конечного размера
- Почти все ВЧ не вычислимы по тьюрингу

- Память позволяет хранить ограниченное число бит
- Каждая операция производится над ограниченным числом бит
#+begin_src cpp
  int add(int x, int y){
    return x + y;}
#+end_src
#+begin_src asm
  lea eax, [rdi + rsi]
	ret
#+end_src
- Естественный способ трактовать огрниченное число бит: как натуральное число. Можно легко закодировать целые.
** Но что делать с вещественными числами?
- Первая идея кодировка с фиксированной точностью
- маленькие диапазоны чисел (64-битное число не больще чем 2^32)
- низкая точность: размер шага не больше, чем 2^-32, это слишком крупный шаг для многих практических применений
- Как лучше всего закодировать нечто вроде вещественных чисел с учетом ограниченной точности доступных нам обьектов?




* Представление с плавающей точкой (7:27)
- Для научных вычислений принято приближать вещественные числа рациональными, используя идею плавающей точки
- Для 8 значащих разрядов с плавающей точкой возможны числа:
| 1234567 | 123456.7 | ... | 1.234567 |
- 1985 IEEE 754
- +\-1.frac*2^exp-127 при этом   (255 < exp > 0)
- mantissa = +\-1.frac
| s | exponent | fractional part of mantissa |
| 0 | 01111100 |      0100000000000000000000 |
| 1 |        8 |                          23 |
- exp - 127 = -3
- mantissa = +1.01b = 1+1/4 = 1.25f
- all = 1.25 * 2^-3 = 0.15625f
- no null - самое близкое 1.0*2^-126




* Нули и бесконечности (18:32)
- Специальное значение exp = 0 соответствует денормализованным числам
- Нормализованные +/-1.frac*2^exp-127 при exp > 0
- Денормализованные +/-0.frac*2^-126 при exp == 0
- Экспонента, состоящая изо всех единиц (exp = 255) при (all frac[i]==0 )  отображает +/-inf
- Число, представляющее собой неопределенность (например результат деления нуля на ноль) называется NaN, и выражается как (exp == 255) && (frac!=0)
- Первый бит отличает qNaN от sNaN
- Сравнение с NaN дает false. (A != A) A - NaN




* Problems (26:55)
** Problem EX
- hint: memcpy
** Problem RP
- hint: fesetround
** Problem ARF



* Реинтерпретация и каст (26:55)
- Разница между приведением и трактовкой как биты очень велика
#+begin_src cpp
float x = 1.0f;
unsigned uval = (unsigned) x; // i == 1
unsigned u = *(unsigned*) &x; // i == 0x3f800000 strict aliasing violation
#+end_src
** Приведение может быть:
- К байтам: char*, unsigned char*, ...
- К совместимым типам: int -> unsigned
- Снятие добавление константности




* Плавающие числа, переводы (32:40)
- 1.0f - 3f80...,   2.0f - 40...,   3.0f - 404...,
- 1/16  <  0.1f = 1/10  <  1/8, приближаемся снизу для frac



* Округления (45:10)
- unit in last place
- ulp(1.0f)
#+begin_src cpp 
float d0, d1;
d0 = 1.0f;
d1 = nextafterf(d0, d0+1.0f);
printf("%.8f", d1 - d0);
#+end_src
- Все вычисления над парой чисел z = x (op) y должны быть округлены в пределах 0.5 * ulp(z)
- Округлять можно вверх, вниз, к нулю, к ближайшему
#+begin_src cpp
float a = 1.0, b = 3.0;
fesetround(FE_UPWARD);
fesetround(FE_DOWNWARD);
fesetround(FE_TONEAREST);
fesetround(FE_TOWARDZERO);
#+end_src
- Плотность при приближении к нулю растет


 
* Старые и новые FP числа в asm (58:00)
- В языке C три уровня точности: float, double, long double
- double - 64bit
- long double часто совпадает с double, но иногда (gcc) оно реализуется через ext-precision 80-битные числа
| type        | bits in exponent | bits in frac | significant decimal digits |
| float       |                8 |           23 |                        7-8 |
| double      |               11 |           52 |                      15-16 |
| long double |               16 |           64 |                      20-21 |
- В каких регистрах хранить 80 битные числа? С течением времени этот вопрос сильно менялся
- Обработка плавающих чисел на заре x86 происходила в отдельном FPU
- Сейчас это давно не так, но 32 битный ассемблер остался с тех времен
#+begin_src cpp
double foo(double f1, double f2) {
	double f3;     // fld1 - инструкция чтобы поместить 1.0 на верхушку стека fpu
	f1 = 1.0 - f1; // fsub QWORD PTR [esp+4] - st0 -=mem
	f1 = f2 * f1;  // fmul QWORD PTR [esp+12]
	f3 = f1 / 3.0; // fld st(0) - st1 = st0, st0 = st0
	f2 = f1 + f3;  // fdiv DWORD PTR .LC1
	return f2;     // faddp st(1), st  -  st1 += st0, pop st
}                ///// st - fpu stack
#+end_src
- сопроцессор с отдельным стеком это историческая редкость
- для эффективной работы с плаващей точкой, расширение MMX добавило в архитектуру восемь 64 битных регистров MM0 - MM7 отображающихся на старый стек сопроцессора, т.е. MM0 это 64 битная часть st[0]
- чистый MMX это такая древность, которая тоже уже не встречается
- Расширения SSE, SEE2, SEE3 добавили регистры xmm0-xmm15, отдельные от старого стека, размером в 128 bit 
#+begin_src asm
  movapd xmm2, xmm0
  movsd  xmm0, QWORD PTR .LC0
  subsd  xmm0, xmm2
  mulsd  xmm1, xmm0
  movapd xmm0, xmm1
  divsd  xmm0, QWORD PTR .LC1
  addsd  xmm0, xmm1
#+end_src




* Расширения в System V ABI (1:08:53)
- args: xmm0-15 
- ret: xmm0 
- cvtsi2ss/cvttss2si




* Оптимизации и -ffast-math
- Из-за проблем с точностью компиляторы вынуждены вести себя консервативно
- Можно подать -ffast-math если точноть заботит меньше, чем быстродействие
- Векторизация
