#+TITLE: Базовый курс C++ (MIPT, ILab). Lecture 4. Инициализация и копирование 
#+AUTHOR: idsyr
#+DESCRIPTION: B1
#+STARTUP: showeveryhing
#+OPTIONS: toc:2




* Поисковые деревья (00:00)
- Поисковость это свойство дерева, заключающееся в том, что любой элемент в правом поддереве больше любого элемента в левом
- Любой ключ может быть найден начиная от верхушки дерева за время пропорциональное высоте дерева
- В лучшем случае у нас дерево из N элементов будет иметь высоту lgN
- Важное наблюдение: над одним и тем же множеством элементов все возможные поисковые деревья сохраняютего inorder обход сортированным



** Range queris
- Данным, хранящимся в дереве удобно применять range queries
- Пусть на вход поступают ключи (каждый ключ это целое число, все ключи разные) и запросы (каждый запрос это пара из двух целых чисел, второе больше первого)
- Нужно для каждого запроса подсчитать в дереве количество ключей, такий, что все они лежат строго между его левой и правой границами включительно



** Решение через std::set
#+begin_src cpp
  template <typename C, typename T>
  int range_query(const C& s, T fst,  T snd){
    using itt = typename C::iterator;
    itt start = s.lower_bound(fst);
    itt fin = s.upper_bound(snd);
    return mydistance(s, start, fin);
  }
#+end_src
- Мы хотим, чтобы наше поисковое дерево поддерживало тот же интерфейс (кроме distance т.к. нам нужны переопределенные операторы)
- Кроме того нужен метод insert для вставки ключа



** Проектирование поискового дерева
#+begin_src cpp
  namespace Trees{
    template <typename KeyT, typename Comp>
    class SearchTree{
      struct Node;
      using iterator = Node *;
      Node *top_;
    public:
      iterator lower_bound(KeyT key) const;
      iterator upper_bound(KeyT key) const;
      int distance(iterator fst, iterator snd) const;
    public:
      void insert(KeyT key);
    }
  }
#+end_src



** Проблема дисбаланса
- В лучшем случае поисковое дерево из N будет иметь высоту lgN
- Но дерево может быть поисковыми и при этом довольно беспользным
- В худшем случае оно вырождается в список, что делает RBQ довольно неэффективными
- Но мы видим что std::set работает довольно быстро, то есть как то рещает эту проблему



 
* Сбалансированность (07:48)
** Балансировка поворотами
- Два базовых преобразования, сохраняющих инвариант поисковости это левый и правый поворот
** Хранение инварианта в узле
- Красно-черный инвариант
- АВЛ




* Агрегатная инициализация (12:46)
** Проектирование узла
#+begin_src cpp
  struct Node {
    KeyT key_;
    Node *perent_, *left_, *right_;
    int height_;
  }
#+end_src
- Он может быть инициализирован только старой агрегатной инициализацией 
#+begin_src cpp
  Node n = {key, nullptr, nullptr, nullptr, 0};
  Node n = {key}; // остальные нули
  Node n {key}; // остальные нули, новшество в С++11
#+end_src
- Агрегатная инициализация ломается при появлении приватного состояния
- Кроме того она не дает _уверенности_, что поле key инициализировано\


** Проектирование узла 2
	#+begin_src cpp
		struct Node {
			KeyT key_;
			Node *parent_ = nullptr, *left_ = nullptr, *right_ = nullptr;
			int height_ = 0;
			Node(KeyT key) {key_ = key; } // constuctor
		};
#+end_src
- Он может быть инициализирован либо direct либо copy инициализацией
#+begin_src cpp
  Node n(key); // Прямая инициализация, старый синтаксис
  Node n{key}; // Прямая инициализация, новый синтаксис
  Node k = key; // Копирующая инициализация
#+end_src
- Смысл фигурных скобок:
  - Тип агрегат: фигурные скобки всегда агрегатная инициалиазация
  - У типа есть конструктор из списка инициализации: Скобки это список инициализации без вариантов
  - У типа есть обычные конструкторы: фигурные скобки это обычные конструкторы
- Если есть конструктор из двух аргументов и конструктор из инит листа то старый синтаксис это вызов из двух аргументов и новый это конструктор из инит листа 
- copy init это синтаксис для вызова конструктора




* Старая и новая прямая инициализация (19:50)
** Отступление: старая инициализация
- До 2011 года вызов конструктора предполагал круглые скобки
#+begin_src cpp
  myclass_t m(list_t(), list_t());
  myclass_t m{list_t(), list_t()};
#+end_src
- В парсере С++ есть одно и еще одно важное правило: Все что может быть засчитано за обьявление функции - засчитывается
- Все что может засчитываться за доступ к полю - засчитывается




* Списки инициализации и делегация (25:37)
- Присваивая в теле конструктора, мы инициализируем дважды 
#+begin_src cpp
  struct S{
    S() {std::cout<<"default"<<std::endl;}
    S(KeyT key) {std::cout<<"direct"<<std::endl;}
  };
  struct Node {
    S key_; // default init
    int val_;
    Node(KeyT key, int val){key_ = key; val_ = val;}
  }
#+end_src
- В момент когда конструктор вошел в тело - все поля проинициализированы
- Это значит что мы должны иициализировать его до начала тела конструктора



** Списки инициализации
- Чтобы уйти от двойной инициализации, до тела конструктора предусмотрены списки инициализации
#+begin_src cpp
	Node(KeyT key, int val) : key_(key), val_(val){}
#+end_src
- Список инициализации выполняется в том порядке, в каком поля определены в классе



** Параметры по умолчанию 
- Инициализация в теле класса незримо входит в список инициализации
#+begin_src cpp
  struct Node {
    S key_ = 1; T key2_;
    Node(KeyT key) : key2_(key) {} // S, T
  };
#+end_src
- Если что то уже есть в списке инициализации, то инициализатор в теле класса
- Такое лучше переписать с параметром по умолчанию
#+begin_src cpp
  struct Node {
    S key_;
    Node(KeyT key = 1) : key_(key) {} // key_(key)
#+end_src



** Обсуждение: делегация конструкторов
- Если конструктор делает нетривиальные вещи, его можно делегировать
#+begin_src cpp
  struct class_c {
    int max = 0, min = 0;
    class_c(int my_max) : max(my_max > 0 ? my_max : DEFAULT_MAX) {}
    class_c(int my_max, int my_min) : class_c(my_max), min(my_min > 0 && my_min < max ? my_min : DEFAULT_MIN) {}
  }
#+end_src
- Место делегирующего конструктора первое в списке инициализации
- Далее делегирующий конструктор можно тоже делегировать



* Деструкторы (34:42)
#+begin_src cpp
  struct Node {
    KeyT key_;
    Node *parent_ = nullptr, *left_ = nullptr, *right_ = nullptr;
    int height_ = 0;  
    Node(KeyT key) : key_(key) {}
    ~Node() {delete left_; delete_right_;}
  }
#+end_src
- Мы берем на себя слишком много, удалять должен struct Tree
- Переполнение стека



** Частые ненужные приседания
- Не нужно делать в деструкторе лишние обнуления состояния
- После токо как деструктор отработал, время жизни окончено



* Value-init (42:50)
** Ассиметрия инициализации
- Для класса с конструктором без аргументов, нет разницы между
#+begin_src cpp
  SearchTree s;  // default-init, SearchTree()
  SearchTree t{} // default-init, SearchTree()
#+end_src
- Но для примитивных типов и агрегатов разница гигантская
#+begin_src cpp
  int n;   // default-init, n = garbage
  int m{}; // value-init, m = 0
  int *p = new int[5]{} // calloc
#+end_src
- То же самое для полей классов




* Копирование и присваивание (46:10)
#+begin_src cpp
  class Empty {
    
  }
#+end_src
- Занимает один байт
- Возможность скопировать, присвоить и уничтожить
** Отличия копирования от присваивания
- Копирование это в основном способ инициализации
#+begin_src cpp
  Copyable a;
  Copyable b(a), c{a}; // прямое конструирование via copy ctor
  Copyable d = a; // копирующее конструирование
#+end_src 
- Присваивание это переписывание готового обьекта
#+begin_src cpp
  a = b;
  d = c = a = b; // Правоассоциативно
#+end_src
- ergo копирование похоже на конструктор. Присваивание совсем не похоже
** Волшебные очки
- Пустой класс 
#+begin_src cpp
  class Empty {
    Empty();
    ~Empty();
    Empty(const Empty&); // copy ctor
    Empty& operator=(const Empty&);
  };
#+end_src
- Все эти (и пару других) методов для вас сгенировал компилятор


** Семантика копирования
- По умолчанию конструктор копирования и оператор присваивания реализуют
  - Побитовое копирование и присваивание для встроенных типов и агрегатов
  - Вызов конструктора копирования, если есть
#+begin_src cpp
  template <typename T> struct Point2D {
    T x_, y_;
    Point2D() : defualt-init x_, default-init y_ {}
    ~Point2D(){}
    Point2D(const Point2D& rhs): x_(rhs.x_), y_(rhs.y_) {}
    Point2D& operator=(const Point2D& rhs){
      x_ = rhs.x_; 
    }
  };
#+end_src
- default ctr сгенерированный компилятором делает то, что вы сами не можете сделать - он оставляет мусор

** Обсуждение
- Должны ли мы делать неявное явным?
#+begin_src cpp
  template <typename T, typename KeyT> class Cache {
    std::list<T> cache_;
    std::unordered_map<KeyT, T> locations_;
  }
#+end_src
- По умолчанию копирование и присваивание тут отлично работают
- В таких случаях мы не должны определять копирование/присваивание



** Случай когда умолчание опасно
#+begin_src cpp
  class Buffer {
    int *p_;
    public:
    Buffer(int n) : p_(new int[n]) {}
    ~Buffer() {delete [] p_;}
  }

  {Buffer x; Buffer y = x;} // <- double deletion
  Buffer::Buffer& operator= (const Buffer& rhs) {p+ = rhs.p_; /* ... */} // (default)
#+end_src
- Если мы управляем ресурсом, которым никто не управляет, то мы должны написать копирование и присваивание
- RAII - как управлять ресурсами, которыми никто кроме нас не управляет



** Default и delete
- Мы можем явно попросить дефолтное поведение прописав dafult(это для особых ситуаций) и явно его заблокировать, написав delete(и мы лишаемся вохможности передать и вернуть по значению)
#+begin_src cpp
  class Buffer {
    int *p_;
  public:
    Buffer(int n) : p_(new int[n]) {}
    ~Buffer() {delete [] p_;)
    Buffer(const Buffer& rhs) = delete;
    Buffer& operator= (const Buffer& rhs) = delete; 
  }
  {Buffer x; Buffer y = x;} // compilation error
#+end_src




* Тонкости реализации копирования (58:49)
** Реализуем копирование
#+begin_src cpp
  class Buffer {
    int n_; int *p_;
    public:
    Buffer(int n ) : n_(n), p(new int[n]) {}
    ~Buffer() {delete [] p_; }
    Buffer(const Buffer& rhs) : n_(rhs), p_(new int[n_]), { std::copy(p_, p_ + n_, rhs.p_); }
  }
#+end_src



** Реализуем присваивание
#+begin_src cpp
	BUffer& Buffer::operator= (const Buffer& rhs){
		if(this ==  &rhs) return *this; // a = a
		n_ = rhs.n_;
		delete [] p;
		p_ = new int[n_];
		std::copy(p_, p_ + n_, rhs.p_);
		return *this;
	}  
#+end_src
- Тут может закончиться куча (во второй части курса об этом)




* Спецсемантика копирования, RVO (1:03:00)
#+begin_src cpp
  struct foo {
    foo() {cout << "foo::foo()" << endl;}
    foo(const foo &) {cout << "foo::foo(const foo&)" << endl;}
    ~foo(){cout << "foo::~foo()" << endl; }
  }
  foo bar(){
    foo loacal_foo;
    return local_foo;
  }
  int main(){foo f = bar(); }
#+end_src
- Вывод
#+begin_src cpp
  foo::foo()
  foo::~foo()
#+end_src
- У копирования и присваивания есть спецсемантика
- Спецсемантика заключается в следующем
  - Обьект после копирования эквивалентен во всех отношениях тому обьекту с которого копировали
    

** Допустимые формы
- Поскольку конструктор копирования подвержен RVO, это не просто функция. У нее есть специальное значение, которое компилятор должен соблюдать
- Но чтобы он распознал конструктор копирования, у него должна быть одна из форм, предусмотренных стандартом. Основаня форма это константная ссылка
#+begin_src cpp
  struct Copyable{
    Copyable(const Copyable &c);
  }
#+end_src
- Допустимо также принимать неконстантную ссылку, как угодно cv-квалифицированную ссылку или значение





* CV-квалификация (1:09:00)
#+begin_src cpp
  const int = 34; // обьект в который нельзя записать другое значение
  volatile int v; // в двух последовательных обращениях может непредсказуемо измениться
  const volatile int cv = 42; // записать нельзя, но может непредсказуемо измениться (непредсказуемо неизменяется*)
#+end_src
#+begin_src cpp
  int S::foo() const {return 42;} // Можно вызывать у const обьекта, метод не изменяить значение класса
  int S::bar() volatile { return 42; } // аналогично
  int S::buz() const volatile {return 42;} // аналогично
#+end_src



** Недопустимые формы
- Шаблонный конструктор это никогда не конструктор копирования
- Это coercion конструктор: конструктор копирования любым другим параметризированным параметром, но не T
#+begin_src cpp
  template <typename T> struct Coercible {
    template <typename U> Coercible(const Coercible<U> &c){
      std::cout<<"Hello!"<<std::endl;
    }
  };
  Coercible<void> a;
  Coercible<void> b{a}; // На экране ничего
  Coercible<int> c{a};
#+end_src



* Спецсемантика инициализации, explicit (1:14:40)
- Обычные конструкторы определяют неявное преобразование типа
  #+begin_src cpp
    struct MyString {
      char *buf_; size_t len_;
      MyString(size_t len) : buf_{new char[len]{}}, len _{len} {}
    };
    void foo(MyString);
    foo(42); // ok? MyString implicitly constricted
  #+end_src
- Почти всегда это очень полезно
- Но это _не всегда_ хорошо, например в ситуации со строкой, мы ничего такого не имели в виду
- в overload set это пользовательское преобразование



** Требуем ясности
- Ключевое слово explicit указывается когда мы хотим заблокировать пользовательское преобразование



** Снова direct vs copy
- Важно понимать, что explicit конструкторы рассматриваются для прямой инициализации
#+begin_src cpp
  struct Foo {
    explicit Foo(int x) {}
  };
  Foo f{2}; // Прямая инициализация
  Foo f = 2; // Инициализация копированием, FAIL
#+end_src



** Пользовательские преобразования
- В некоторых случаях мы не можем сделать конструктор. Скажем что если мы хотим неяно преобраховывать Quat<int> в int
- Тогда мы пишем operator type
#+begin_src cpp
  struct Mystring {
    char *buf_; size_t len_t;
    /* explicit */ operator const char*() {return buf_;}
  }
#+end_src
- На такие операторы можно навешивать explicit тогда возможно только явное преобразование



** Избыточность
- таким образом есть некая избыточность
  - два способа перегнать туда
  - Два способа перегнать обратно
- Конечно хороший тон это использовать конструкторы где возможно
- При direct init рассматриваются только конструкторы включая explicit
- При copy-init рассматриваются только implicit конструкторы, включая операторы implicit cast и они приоритетнее



* Дополнения к перегрузке (1:24:01)
- Пользовательские преобразования участвуют в перегрузке
- Они проигрывают стандартным, но выигрывают у троеточий



** Такие разные операторы
- Перегрузка операторов присваивания и приведения выглядит непохоже
#+begin_src cpp
  struct Point2D{
    int x_, y_;
    Point2D& operator=(const Point2D& rhs) = default;
    operator int() {return x;}
  };
#+end_src
- В мире конструкторов спецсемантика есть только у копирования и присваивания
- В мире переопределенных операторов она есть везде и она ждет уже на следующей лекции



* Домашняя работа HWT (1:27:40)
- Дома нужно отдыхать






