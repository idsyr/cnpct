#+TITLE:Базовый курс C++ (MIPT, ILab). Lecture 8. Наследование и полиморфизм
#+AUTHOR: idsyr
#+DESCRIPTION: B1
#+STARTUP: showeveryhing
#+OPTIONS: toc:2



* ParaCL
** Синтаксические деревья 
- Грамматика представляется синтаксическим деревом
#+begin_src cpp
  while (iters > 0){
    iters = iters -  1;
  }
#+end_src
- И тут есть проблема: допустим мы хотим представить узел такого дерева
- Но все узлы очень разные


* Unions
** Первая попытка: супер-узел
#+begin_src cpp
  struct Node {
    Node *parent_;
    Node_t type_; // enum Node_t
    union Data {
			struct Decl {std::string declname_; } decl_;
      struct Binop {BinOp_t op_; } binop_; // enum
      // ...  
    } u;
    std::vector<Node *> childs_;
  };
#+end_src
- И приходится руками вызывать деструктор
- конструктор имеет свои особенности:
#+begin_src cpp
  U(std::string s) { new (&s_) std::string{s}; }
#+end_src





* Изобретаем наследование
** Вторая попытка: void pointers
- Что если мы заведем структуру которая знает свой тип?
#+begin_src cpp
  struct Node {
    Node *parent_;
    Node_t type_;
    void *data_;
  };
#+end_src 
- Конкретные узлы хранят базовую часть
#+begin_src cpp
  struct BinOp {
    Node basepart_;
    BinOp_t op_;
    Node *lhs_, *rhs_;
  };
#+end_src
- Теперь можно написать фукнцию-конструктор бинарной операции
#+begin_src cpp
  Node* create_binop(Node *parent, BinOp_t opcode) {
    Node base = {parent, Node_t::BINOP, nullptr};
    BinOp *pbop = new BinOp {base, opcode, nullptr, nullptr};
    pbop->basepart_.data = static_cast<void *>(pbop);
    return &pbop->basepart_;
  }
#+end_src
- И от Node* можно сделать static_cast к BinOp* и работать с ним


** Лучшее решение: поддержка в языке
- Кажется для идеи "B является А" (также называется "отношение is-a") в языке нужна непосредственная поддержка
- Это называется наследование и его открытая форма записывается через двоеточие и ключевое слово public
#+begin_src cpp
  class A {};
  class B : public A {}; // B is a A
#+end_src
- Это отношение открытого наследования позволяют нам переписать отношение более явно

** Открытое наследование
#+begin_src cpp
  struct Node {
    Node *parent_;
    Node_t type_;
  };
#+end_src
- Мы получили куда лучшую запись
#+begin_src cpp
  struct BinOp : public Node {a
    BinOp_t op_;
    Node *lhs_, *rhs_;
  };
#+end_src
- Теперь функция конструктор и впрямь является конструктором
#+begin_src cpp
   struct Node {
    Node *parent_;
    Node_t type_;
  };
  struct BinOp : public Node {
    BinOp_t op_;
    Node *lhs_ = nullptr, *rhs_ = nullptr;
    BinOp(Node *parent, BinOp_t opcode) : 
      Node{parent, Node_t::BINOP}, op_(opcode) {}
  };
#+end_src


** Открытое наследование 2
- Поскольку обьект производного класса является обьектом базового класса, указатели и ссылки приводятся неявным приведением
- Обратно можно привести через static_cast
#+begin_src cpp
  struct Node;
  struct BinOp : public Node;
  void foo(const Node &pn);
  BinOp *b = new BinOp(p, op);
  foo(*b);
  Node *pn = b;
  b = static_cast<BinOp*>(pn);
#+end_src
- Эта лекция посвещена тому как уйти от удаления в стиле union



* Принцип подстановки

** Обсуждение: квадрат и прямоугольник
- У открытого наследования есть два несвязанных смысла:
  - B расширяет A
  - B является частным случаем A
- Только если оба свойства выполнены - ок
- Circle and ellipse problem


** Принцип подстановки Лисков
- Типы Base и Derived связаны отношениями is-a (Derived является Base) если любой истинный предикат(любой интересующий нас истинный предикат) относительно Base остается истинным при подстановке Derived
- Именно этот принцип дает нам возможнорсть завести в языке неявное приведение из Derived в Base
- Для С++ этот принцип обычно выполняется с точностью до декодирования
- При правильном проектировании, вы всегда можете подставить Derived* вместо Base* и Derived& вместо Base&
- Подстановка значений сопряжена с некоторыми проблемами


** Проблемы срезки: первое приближение
#+begin_src cpp
  struct A{
    int a_;
    A(int a) : a_(a) {}
  };
  struct B : public A {
    int b_;
    B(int b) : A(b/2), b_(b) {}
  };
  B b1(10);
  B b2(8);
  A& a_ref = b2;
  a_ref = b1; // b2 == ?
#+end_src
- Он скопирует только A, поэтому a_ = 5, b_ = 8 


** Обсуждение
- Базовая срезка возникает из-за того, что присваивание не полиморфно
#+begin_src cpp
  struct A {
    int a_;
    A(int a) : a_(a) {}
    // A& operator=(const A& rhs) { a_ = rhs.a_; }
  };
  a_ref = b1; // a_ref.operator=(b1); b1 приводится к const A&
#+end_src
- Было бы здорово если бы функция во время выполнения вела себя по разному в зависимости от настоящего типа своего первого аргумента



* Домашнее задание
- HWP: ParaCL FE + симулятор



* Полиморфизм
** Общий интерфейс
- Мы можем спроектировать классы Triangle и Polygon так, чтобы они имели общий метод sqiare(), вычисляющий их площадь
- Можем ли мы сохранить массив из неважно каких обьектов лишь бы они имели этот метод?
- Ответ да: для этого мы дожны сделать для них общий интефейс от которого они оба наследуют

#+begin_src cpp
  struct ISquare { void square(); }
  struct Triangle : public ISquare;
  struct Polygon  : public ISquare;
  std::vector<ISquare*> v;
#+end_src


** Первая попытка: указатель на метод 
#+begin_src cpp
  class ISquare {
    sometype *sqptr_;
  public:
    ISquare(sometype *sqptr): sqptr_(sqptr) {}
    double square() const { return sqptr_->square(); }
  };
  template <typename T> struct Triangle : public ISquare {
    Point<T> x, y, z;
    Triangle() : ISquare(this) {}
    double square() const;
  }
#+end_src


** Языковая поддержка: virtual
#+begin_src cpp
  struct ISquare {
    virtal double square() const;
  };
  template <typename T> struct Triangle : public ISquare {
    Point<T> x, y, z;
    double square() const;
  }
#+end_src
- Простое совпадение имени означает переопределение (overriding) виртуальной функции


** Таблица виртуальных функций
- При создании класса с хотя бы одним виртуальным методом в него добавляется vptr
- Конструктор базового класса динамически выделяет память для таблицы виртуальных функций
- Конструктор каждого потомка производит инициализацию ее своими методами. В итоге там всегда оказываются нужные указатели

** Порядок конструирования
- При наследовании он имеет ключевое значение
#+begin_src cpp
  template <typename T> struct Triangle : public ISquare {
    Point<T> x, y, z;
    double square() const;
    Triangle() : ISquare(), x{}, y{}, z{} {}
  }
#+end_src
- Сначала конструируется подобьект базового класса, который невидимо конструирует себе таблицу виртуальных функций
- Потом конструктор подобьекта производного класса невидимо заполняет ее адресами своих методов
- Таблица виртуальных функций сконструирована и заполнена в точке завершения конструктора



** Статический и динамический тип
- Рассмотрим функцию
#+begin_src cpp
  double sum_square(const ISquare &lhs, const ISquare &rhs) {
    return lhs.square() + rhs.square();
  }
  Triangle t; Polygon p;
  sum_square(t, p);
#+end_src
- Статическим типом для lhs и rhs является известный на этапе компиляции тип const ISquare&
- При этом в конкретном вызове у них могут быть разные динамические типы
- Динамический полиморфизм - виртуальные функции
- Статический полиморфизм - шаблоны


** Проблемы с overloading
- Здесь допущена обычная человеческая ошибка с типами int vs long
#+begin_src cpp
  struct Matrix {
    virtual void pow(int x); // any
  }
  struct SparceMatrix : Matrix {
    void pow(long x); // sparce
  };
  Matrix *m = new SparceMatrix;
  m->pow(3); // Matrix::pow
#+end_src
- И она override если совпадает по сигнатуре, и overload если не совпадает
- К счастью это можно пометить


** Обсуждение: overload vs override
- Переопределение функции (overriding) это замещение в классе наследнике виртуальной функции на функцию наследника
- Перегрузка функции (overloading) это введение того же имени с другими типами аргументов
#+begin_src cpp
  void pow(int x) override;
#+end_src
- Аннотация override сообщает, что мы имели в виду переопределение


** Языковая поддержка: pure virtual
#+begin_src cpp
  struct ISquare {
    virtual double square() const = 0;
  }
#+end_src
- Проблема определения метода в базовом классе решается чисто виртуальными методами которые не требуют определения и только делегируют наследникам
- Обьект класса с чисто виртуальными методами не может быть создан
- Чисто виртуальный метод - это метод который каждый наследник обязан оверрайдить, но который запрещает создавать обьекты это типа
- Очень часто если нечего сделать чисто виртуальным - делаеют чисто виртуальный деструктор (НО у него должно быть тело, даже если он чисто вирутальный)
- Чисто виртуальный метод можно вызывать
- Даже чисто виртуальный деструктор вызывается из обычного деструктора у наследника
- Чисто виртуальный конструктор невозможен



** Внезапная утечка памяти
- Следующая проблема: удаление по указателю на базовый класс
#+begin_src cpp
  ISquare *sq = new Triangle<int>; delete sq;
#+end_src
- Деструктор не виртуальный
- Виртуальный деструктор предназначен для уничтожения обьектов производного класса по указателю на базовый класс


** Обсуждение 
- Мы хотим, чтобы удаление по указателю на базовый класс вызывало правильный деструктор произвольного класса
- Это означает, что нам нужен виртуальный деструктор.
#+begin_src cpp
  struct ISquare {
    virtual double square() const = 0;
    virtual ~ISquare() {}
  };
  template <typename T> struct Triangle : public ISquare {}
  ISquare *sq = new Triangle<int>;
  delete sq; // ok, вызван Triangle::~Triangle()
#+end_src


* Как правильно писать классы?
** Интерфейсные классы
- Класс в котором все методы чисто виртуальные служит своего рода общим интерфейсом
#+begin_src cpp
  struct ISquare {
    virtual double square() const = 0;
    virtual ~ISquare() {}
  };
#+end_src
- Такой класс называется абстрактным базовым классом
- К сожалению виртуальный конструктор ( в том числе копирующий ) невозможен
- Тогда непонятно как нам скопировать по базовому классу 


** Виртуальное копирование
- обычно используется виртуальный метод clone 
#+begin_src cpp
  struct ISquare {
    virtual ISquare *clone() const = 0; 
  };
  template <typename T> struct Triangle : public ISquare {
    std::array<Point<T>, 3> pts_;
    Triangle *clone() const override {
      return new Triangle{pts_};
    }
  }
#+end_src
- override здесь законный поскольку Triangle<T>* открыто наследует и значит является ISquare*


** Срезка возвращается
- Из-за невозможности виртуальных конструкторов, срезка возможна при передаче по значению
#+begin_src cpp
  void foo(A a) { std::cout << a << std::endl; }
  B b(10); foo(b1); // на экране "5"
#+end_src
- Поэтому никогда не передавайте обьекты базовых классов по значению
- Используйте указатель или ссылку


** Языковая поддержка: final
- Допустим мы написали некий класс Foo
- Писать ли у него виртуальный деструктор?
- Если мы хотим чтобы от него наследовались то да писать
- Если мы не хотим оверхеда на vtable, то можно обьявить его final
#+begin_src cpp
  struct Foo final {
    // content
  }
#+end_src
- Теперь нследование будет ошибкой компиляции



* Четыре главных способа
** Пишем правильно: четыре способа
- Класс в С++ написан правильно если и только если любое из условий выполнено:
  1. Класс содержит виртуальный деструктор
  2. Класс обьявлен как final
  3. Класс является stateless и подвержен EBCO
  4. Класс не может быть уничтожен извне, но может быть уничтожен потомком (protected dstr)
- Первые два варианта уже обсудили



** Empty Base Class Optimizations  
- Оптимизация пустого класса (EBCO) применяется когда базовый класс пустой
#+begin_src cpp
  class A{};
  class B : public A{};
  A a; assert(sizeof(a) == 1);
  B b; assert(sizeof(b) == 1); // ok
#+end_src
- Зачем наследоваться от пустого класса? Чтобы затащить методы базового класса



** EBCO и unique_pointer
- Мы говорили что unique_ptr выглядит как то так
#+begin_src cpp
  template <typename T, typename Deleter = default_delete<T>>
  class unique_ptr {
    T *ptr_; Deleter del_;
  public:
    unique_ptr(T *ptr = nullptr, Deleter del = Deleter()) : ptr_(ptr), del_(del) {}
    ~unique_ptr() { del_(ptr_); }
  };
#+end_src
- Но можем ли мы сэкономить, если Deleter это stateless class?
- Если делетер в unique_pointer это класс, то
#+begin_src cpp
  template <typename T, typename Deleter = dafault_delete<T>>
  class unique_ptr : public Deleter {
    T *ptr_;
  public:
    unique_ptr(T *ptr = nullptr, Deleter del = Deleter()) : 
      Deleter(del), ptr_(ptr) {}
      ~unique_ptr() { Deleter::operator()(ptr_); }
  };
#+end_src
- Увы это невозможно если делетер фукнция
- В качестве тизера оставлено _как же_ unique_ptr отличает класс от функции


** Обсуждение
- Разумеется при использовании таких миксинов никто не будет стирать класс по указателю на его делетер
#+begin_src cpp
  struct CDeleterTy {
    void operator()(int *t) { delete[] t; }
  };
  CDeleterTy *pDel = new std::unique_ptr<int, CDeleterTy> { new int[SZ]() };
  delete pDel; // к счастью это не скомпилируется
#+end_src
- Писать виртуальный деструктор в миксин не хочется. Потому что он резко станет statefull


** Языковая поддержка: protected
- Модификатор protected служит для защиты от всех, кроме наследников
- Он позволяет писать чисто-базовые классы
#+begin_src cpp
  class PureBase {
  protected:
    ~PureBase() {}
  };
#+end_src 
- Теперь обьект класса-наследника просто нельзя удалить по указателю на базовый класс и проблемы снимается
- Если не удалять изнутри класса и тогда все по прежнему




* Pure virtual calls

** Обсуждение
- Виртуальная функция вызывается как минимум по указателю (в случае множественного наследования все еще хуже)
- Мало того, этот указатель должен быть правильно заоплнен в конструкторе
- На практике это значит целый новый класс ошибок

** PVC
- Распространенной ошибкой является вызов чисто виртуального метода
#+begin_src cpp
  struct Base {
    Base() { doIt(); } // PVS invocation
    virtual void doit() = 0;
  };
  struct Derived : public Base { void doIt() override; };
  int main() {
    Derived d; // PVC appears
  }
#+end_src
- Заметьте, вызов чисто виртуальной функции это ошибка не только в ctor/dtor, но и в любой функции, которая из них вызывается
- Вызов виртуальной функции в конструкторе работает как невиртуальный вызов


** Виртуальные функции в конструкторах
- Даже если они не приводят к PVC, они работают как невиртуальные
- Поэтому многие вообще скептически относятся к вызовам функций в ctor/dtor




* Статическое и динамическое связывание
- Говорят, что виртуальные функции связываются динамически (так называется процесс разрешения адреса функции через vtbl во время выполнения
- Обычные функции связываются статически
- Даже если физически они приходят из динамических библиотек или являются позиционно независимыми и адресуются через PLT, это неважно
- Увы, но многие другие вещи имеют статическое связывание, например аргументы по умолчанию


** Аргументы по умолчанию 
- Как уже было написано, они связываются статически, то есть зависят только от статического типа
#+begin_src cpp
  struct Base{ virtual int foo(int a = 14) {return a;} }
  struct Derived : public Base { int foo(int a = 42) override {return a;} }
  Base *pb = new Derived{};
  std::cout << pb->foo() << std::endl; // на экране 14
#+end_src



** Выход из положения: NVI
- Если хочется интерфейс с аргументами по умолчнию, его можно сделать невиртуальным, чтобы никто не смог их переопределить
#+begin_src cpp
  struct BaseNVI{ 
    int foo(int x = 14) {return foo_impl(x);}
  private:
    virtual int foo_impl(int x) {return a;}
  };
  struct Derived : public BaseNVI {
    int foo_impl(int a) override {return a;}
  };
#+end_src
- Закрытая виртуальная функция открыто переопределена. Это нормально


** Два полиморфизма
- Полиморфной (по данному аргументу) называется функция, которая ведет себя по разному в зависимости от типа этого аргумента
- Полиморфизм бывает статический, когда функция управляется известными на этапе компиляции типами и динамический, когда тип известен только на этапе выполнения
- Примеры
  - Множество перегрузки можно рассматривать как одну статически полимлофную функцию (по любому аргументу)
  - Шаблон функции это статически полиморфная функция (по любому аргументу)
  - Виртуальная функция это динамически полиморфная фукнция (по первому неявному аргументу this)




* Перегрузка виртуальных функций
- существовать шаблон виртуального метода не может (к счастью)
- перегружать виртуальные функции можно (вызывает крайне мрачные последствия из за сокрытия имен)

** Введения имен в область видимости
- Для введения имен в область видимости, используем using
#+begin_src cpp
  struct Matrix {
    virtual void pow(double x);
    virtual void pow(int x);
  };
  struct SparseMatrix : public Matrix {
    using Matrix::pow;
    void pow(int x) override;
  }
  SparseMatrix d;
  d.pow(1.5); // Matrix::pow(1.5) // using
#+end_src




* Закрытое наследование
** Обсуждение: контроль доступа
- К этому времени мы знаем три модификатора доступа
  - public - доступно всем
  - protected - доступно только потомкам
  - private - доступно только самому себе
- Но мы также знаем, что public означает открытое наследование и вводит отношение is-a
#+begin_src cpp
  class Derived : public Base { // Derived is a Base
#+end_src
- Можем ли мы представить себе иные отношения общее-частное?



** Разновидности наследования 
- При любом наследовании private поля недоступны классам наследникам
- Остальные поля изменяют в наследниках уровень доступа в соответствии с типом наследования
| _______________ | public inheritance | protected inheritance | private inheritace |
| public becomes: | public             | protected             | private            |
| protected:      | protected          | protected             | private            |
- Приватное наследование эквивалентно композиции в закрытой части
- Говорят что оно моделирует отношение part-of
- Неявного приведения типа при этом не происходит


** Наследование по умолчанию
- Второе отличие class от struct: у class по умолчанию private, у struct public (поля и модификатор наследования)
- Разумеется хороший тон это писать явные модификаторы, если их больше одного



** Отношение part-of 
- Закрытое наследование
#+begin_src cpp
  class Whole : private Part {};
#+end_src
 - Композиция
#+begin_src cpp
  class Whole {
    private: Part p_;
  };
#+end_src
- Ключевое отличие наследования это:
  - возможность переопределять виртуальные функции из базового класса
  - доступ к защищенным полям базового класса
  - Возможность использовать using и вводить имена из базового класса в свой scope
- Композиция должна быть выбором по умолчанию

  


** EBCO и uniaue_pointer: private inh
- Логично, что мы хотим private, на него EBCO тоже работает
- Теперь нет опасности приведения к базовому классу



** Case study: MyArray
- Допустим у вас есть интерфейс IBuffer, использованный в Array
#+begin_src cpp
  class Array {
    protected: 
    IBuffer *buf_;
    public:
    explicit Array(IBuffer *buf) : buf_(buf) {}
    // ...
  };
#+end_src
- Вы реализовали ваш собственный класс MyBuffer, наследующий от IBuffer
- Как написать класса MyArray, наследующий от Array и использующий MyBuffer?


** Первая попытка: двойное включение
- Мы можем просто сохранить MyBuffer внутри
#+begin_src cpp
  class MyArray : public Array {
  protected:
    MyBuffer mbuf_;
  public:
    explicit MyArray(int size) : mbuf_(size), Array(&mbuf) {} // !
  };
#+end_src
- Это не будет работать, так как буффер нельзя инициализировать раньше базового класса
- Но и переставить инициализаторы мы не можем

