#+TITLE: Семинар 8.1. Матрицы и линейное программирование 
#+AUTHOR: idsyr
#+STARTUP: showeverything
#+OPTIONS: toc:2




* Определители (00:00)
- Что такое определитель?
- Есть система линейных уравнений:
- a11x1+a12x2=b1
- a21x1+a22x2=b2
- Решений нет если коэффиценты пропорциональны (Определитель равен нулю):
- x1=D1/D
- x2=D2/D
- D =
| a11 | a12 |
| a21 | a22 |
- = a11a22-a12a21
- D1 =
| b1 | a12 |
| b2 | a22 |
-D2 = 
| a11 | b1 |
| a21 | b2 |
- Второй физ смысл определителя это векторное произведение
- Третий вектор перп им обоим и пропорц площади параллелгр
- determinant and permanent
- Способ посчитать перманент лучше O(fact(n)) неизвестен
** Генерация интересных матриц
- В среднем генерируя матрицы со случайными элементами будут получаться очень плохие тесты
- Как получить матрицу желаемого размера N*N с заданным определителем?
- Полезные свойства:
 - Определитель треугольной матрицы равен произведению диагональных элементов
 - Сложение строки со строкой умноженной на коэффицент не меняет определитель
** Вычисление определителя
- Разложение по строке (столбцу) это рекурсивное вычисление определителя меньшей матрицы и умножение на элемент строки с правильным знаком




* LU-декомпозиция (13:25)
- Метод элиминации Гаусса-Жордана 
- Основан на свойстве определителя, что прибавление столбца или вычитание столбца ничего не меняет
- У треугольной матрицы определитель равен произведению элементов на главной диагонали
- Промежуточный тип таким образом разумно делать с плавающей точной даже для целочисленных матриц
- Большая часть научных вычислений производится с плавающей точкой
** Внезапная проблема
- Что если первый элемент слишком маленький?
- Что если он вообще нулевой?
** D-full pivoting
#+begin_src cpp
// Input: M -- matrix NxN
for(currebt = 0; current < N; ++current){
	// max from [(N - current) x (N - current)] submatrix
	(max, col, row) = max_submatrix_element(M, current);
	swap_columns(M, surrent, col); // sometimes * (-1)
	swap_rows(M, current, row);
	pivot = diagonal_element(M, current);
	if(fabs(pivot) < epsilon) abort(); // elimination not possible
	eliminate(M, current, pivot);
}
// Output: product of the main diagonal
#+end_src





* LAPACK и ее C-interface (19:30)
- Библиотека LAPACK и ее С-интерфейс LAPACKE является одной из старейших и наиболее уважаемых научных библиотек
- Локальное решение problem DT:
#+begin_src cpp
lapack_int LAPACKE_dgetrf(int matrix_layout,
                          lapack_int m,
                          lapack_int n,
                          double *a,
                          lapack_int lda,
                          lapack_int *p);
#+end_src
- dgetrf сохраняет в матрице a разложение на LU, а в массиве P перестановки
- Основана на BLAS




* Основа основ: BLAS (28:55)
| S: single         | D: double         |
| C: single complex | Z: double complex |
** Первый уровень: операции над векторами
| _AXPY  | y = ax+y               |
| _DOT   | dot product            |
| _NRM2  | Euclidean norm         |
| _ASUM  | sum of modules         |
| I_AMAX | index of max abs       |
| _ROTG  | Given's rotation setup |
| _ROT   | Given's rotation apply |
- Euclidean norm = sqrt(sum(pow([i])))
** Второй уровень: операции вектор-матрица
| GE | general           |
| SY | symmetric         |
| TR | tringular         |
| GB | general banded    |
| TB | triangular bander |
| SP | symmetric packed  |
| TP | triangular packed |

| _GER  | A=axy^T+A       |
| _SYR  | A=axx^T+A       |
| _SYR2 | A=axy^T+ayx^T+A |
| _GEMV | y = aAx + By    |
| _SYMV | y = aA^Tx + By  |
| ...   | ............... |
** Третий уровень: операции матрица-матрица
| GEMM | C=aAB+BC   |
| SYMM | C=aA^TB+BC |
| .... | .......... |




* Замеры, gnuplot и задачи (38:58)
- gnuplot
#+begin_src cpp
#ifndef QUIET
printf("Hello from benchname. usage:\n%s", argv[0]);
#endif
#+end_src
- collect.sh (A4 for update):
#+begin_src shell
#!/bin/bash
for((i = 1600; i < 5000; i = i + 400)); do
		./a.out $i 1200 800
done
#+end_src
- gemm.plot:
#+begin_src shell
set term png
set grid
set key left top # левый верхний угол - место для пояснений
set xlabel "AX size (given AY is 1200 and BY is 800)" # надписи
set ylabel "time (seconds)"

set output "sgemm_blas.png"
plot 'mm-blas.dat' with linepoints title 'BLAS result',\
		 'mm-trans.dat' with linepoints t 'Manual mmult'
#+end_src




* Небольшое путешествие во времени (45:02)
** 1939 СССР
- Имеется n складов некоего однородного груза и m заводов
- Известно:
 - Сколько груза находится на i складе ai
 - Сколько нужно груза j заводу bj
 - Расстояние от склада до завода cij. Стоимость перевозки пропорциональна расстоянию и количеству груза xijcij
- Необходимо:
 - Составить наиболее дешевый план перевозки
** Линейное программрование (не путать с динамическое программирование Беллмана)
- В общем случае: максимизировать J(v) = C^Tv
- При ограничениях вида Av < b, где A это матрица и b это вектор-столбец
- Также допустимы ограничения вида Av = B
- Например для случая заводов:
  - Минимизировать c11x11+c12x12+...+cnmxnm
  - При ограничениях:
    - xij>=0, 
    - xi1+xi2+...+xim <= ai, 
    - x1j+x2j+...+xmj >= bj
** Связь минимума и максимума
- Функционал - линейная функция, которая берет на вход вектор и возвращает число
- Если мы минимизируем (максимизируем) функционал J(x) то:
 - max(J(x)) = -min(-J(x))
- То есть на самом деле задача максимизации и минимизации связаны и часто взаимозаменяемы




* Линейное программирование (52:44)
** Простая модельная задача
- Поскольку задача линейная, максмум всегда в особой точке
- графическое представление - выпуклый многогранник
 - Выпуклый многогранник в n-мерном пространстве - выпуклый  политоп
- Выпуклый политоп, по которому мы должны ходить и по особым точкам считать значение функционала
- Выпуклые политопы состоят из симплексов, Первый метод - Симплекс метод
** Обсуждение 
- Все это очень хорошо пока размерность маленькая. Но что если вектор из десятков элементов? А если из тысяч?
- В общем случае мы имеем дело с задачей минимизации на многомерном выпуклом политопе (с каким-то неглупым перебором его вершин)
- Существуют самые разные методы решения. Реализация даже простых методов (например классического симплекс метода) даже с помощью Lapack довольно сложна и неочевидна
- mariage problem сводится 
- для задачи есть солвер если:
 - первое свойство: решение сложно и неочевидно
 - второе свойство: к этой задаче формально сводится много других задач




* Coin-or LP solver (01:01:05)
- MPS формат
- clp test.mps -minimize -dualS -solution solfile
- В A31: нелинейные уравнения, метод Ньютона, фракталы


* Problem
- DT
