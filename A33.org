#+TITLE: Завершение: Вычислимость 
#+AUTHOR: idsyr
#+STARTUP: showeverything
#+OPTIONS: toc:2



* Введение. Начнем с ассемблера (00:00)
- Вспомним какой нибудь простой ассемблер, например RISC-V
- Основные его элементы это регистры, память и операции над ними
- Какие группы регистров вы еще можете вспомнить?
- Главный вопрос такой: нужно ли нам столько регистров?
- Можем ли мы как-то их сократить, но при этом все еще оставить ассемблер универсальным?



* Упрощаем: RAM-машина (04:36)
- Один регистр аккумулятора и бесконечное количество нумерованных ячеек памяти
| LD M | загрузить         |
| ST M | выгрузть          |
| OP M | операция ACC op M |
| JZ L | если ACC == 0     |
| J  L | безусловно        |



* Упрощаем далее: Ламберт-Минский (10:10)
- risc-v
- Очевидно нам нужны одна операция перехода, одна операция загрузки и одна операция сохранения
- Мы легко выкидываем специальные и data-flow
- DIV - деление в столбик
- MUL - ADD в цикле
- ADD, SUB - инкремент, декремент в цикле
- Они однооператорные - нам не нужен регистр аккумулятора
- Спецсемантика с нулевой ячейки -> метка HALT
- Итого 4 команды
- У нас в каждой ячейке хранится целое число произвольной длины
- Нам нужно адресовать произвольную ячейку
- Можем ли мы избавится от этого: хранить в ячейках памяти только нули и единицы и при этом адресовать только ту ячейку на которую сейчас указывает data pointer?



* Финал упрощений: машина Тьюринга (17:22)
- Команды сильно упростились, а память стала тернарной
#+begin_src asm
  WRITE N ;; пишет в [P] число N, где N={0,1,empty}
  MOVE D  ;; двигает P = P + 1 если D = L или P = P - 1 если D = R
  J L, N  ;; прыгает на метку L если [P] = N
  J L     ;; прыгает на метку L безусловно. Метка HALT завершает работу
#+end_src


** Разновидности машин Тьюринга
- Ячейки не обязаны быть бинарными + empty. Мы можем их сделать например десятичными + empty
- Лента не обязана быть одна. Если мы не собираемся их смешивать, мы можем иметь входную ленту, выходную ленту и сколько то рабочих лент
- Мы будем говорить про МТ на конечном количестве m-арных лент общим числом состояний s



* Опыты в невычислимости (28:07)
- математически доказать что то относительно сложного ассемблера с большим количеством регистров, операций и итд не получится
- Машина Тьюринга настолько простая, что для нее начинают работать мат доказательства


** Невычислимость простой операции
- рассмотрим вход p=0.3n (n-означает повторение n раз, dot - any)
- Машина должна дать выход 0.9n 
- Допустим к моменту когда на выходную десятичную ленту нужно записать первый символ, обработано k символов 
- Но тогда вход 0.3k4 должен дать такую же первую цифру выхода что и 0.3k3. Это дает противоречие


** Универсальная машина Тьюринга
- Поскольку сама машина вполне может быть закодирована нулями и единицами, гипотетически она сама может лежать на ленте
- Тогда мы можем составить машину Тьюринга, которая считывает с ленты другую машину в качестве программы, а потом исполняет ее на входе и пишет выход
- На одной бинарной ленте можно построить УМТ всего за 24 состояния
- Но машина Тьюринга записанная на ленте это число. 


** Проблема останова
- Построим функцию h(n,m) = [machine n halts on input m]
- Здесь нотация [P(n,m)] это 1 если P(n,m) = true и 0 если нет
- Является ли h(n,m) вычислимой на машине Тьюринга?


** Главная невычислимая функция
- Допустим, что является. Тогда построим машину TD(#T) такую, что она:
  - закцикливается, если машина T завершает работу на входе равном T
  - завершает работу если наоборот
- Мы пришли к противоречию: TD(#TD) должна одновременно зациклиться и не зациклиться
- Следовательно проблема останова неразрешима на машине Тьюринга



* Тезис Черча-Тьюринга (39:55)
- Мы уже убедились, что есть невычислимые функции
- Но может быть это только потому что машина Тьюринга довольно проста?
- Можем ли мы придумать другой более мощный формализм в котором они окажутся вычислимыми? 
- Любая функция, которая может быть вычислена _физ устройством_, может быть вычислена машиной Тьюринга
- Иные модели вычислений выключают
 - Алгорифмы Маркова
 - Машины Поста
 - Частично-рекурсивные функции Клини
 - Колмогоровские комплексы
 - Лямбда-исчесление Алонзо Черча
- Все они сводятся к машине Тьюринга и обратно, она сводится к ним




* На пути к теореме Райса (44:40)
** Пример простой задачи
- У вас на входе функция f(k) (это не черный ящик, о функции известно все, все ее состояния, все ее переходы), порождающая k-й член ряда для любого k и вам нужно сказать, сходится этот ряд или нет
- Сведем эту проблему к проблеме останова: покажем если мы умеем решать эту проблему - проблему останова мы тоже решим

- Допустим у нас есть такой алгоритм A1. Рассмотрим программу P и построим функцию
  - g(P,n) = [UMT(P)halts in n steps], f(k) = g(P,k)
- Довольно очевидно, что если программа не завершает работу, то этот ряд расходится, иначе сходится
- Хорошие новости. Имея такой алгоритм мы можем решить проблему останова. Но есть и плохая новость:
- Проблема останова логически неразрешима


** Попробуем упростить задачу
- У нас на входе функция f(k), порождающая k-й член ряда для любого k и вам нужно сказать, есть ли такое k, что f(k) != 0
- можно не только запускать но и анализировать саму функцию


** Теорема Райса
- Для любого нетривиального свойства вычислимых функций определение того, вычисляет ли произвольный алгоритм функцию с таким свойством является алгоритмически неразрешимой задачей
- Тривиальное свойство - присуще всем функциям, либо ни одной
- Сходимость ряда, выдача не только нулей, наличие в программе разыменования нулевого указателя - нетривальное свойство




* Статические анализаторы и их лживость (52:00)
- Это такие программы которые работают неперекор теореме Райса
- clang-tidy




* Быстро растущие функции и Busy Beaver (56:40)
** Примитивно рекурсивные функции
- Базовыми примтивно-рекурсивными являются
 - Нулевая
 - Следования succ(n) = n+1
 - Индексная, сопоставляющая набору число из этого набора
- Из них мы можем производить новые с помощью
 - Суперпозиции
 - Примитивной рекурсии

- Существуют ли функции, которые растут быстрее любых примитивно рекурсивнымх функций?


** Функция Аккермана
- Обще рекурсивна
- В общем случае такие ф являются частично рекурсивными 
- для таких функций помимио суперпозиции и примитивной рекурсии существует правило минимизации
- Минимизация := m(f)(x1...xn) = z, if f(i,x1...xn)>0 for i<z and f(z,x1...xn) = 0
- Исходная f может быть никогда не быть равна нулю и тогда конструируемая функция m(f) не определена  (аналог: машина Тьюринга зациклилась)


** Общерекурсивные функции 
- Общерекурсивной называется такая частично рекурсивная ф, которая определена для всех своих аргументов
- Функция Аккермана общерекурсивна
- Проблема доказательства общерекурсивности алгоритмически не разрешима
- Частично рекурсивные фукнции эквивалентны машинам Тьюринга

- А теперь интересный вопрос. Можем ли мы найти такую ф, которая растет быстрее, чем любая частично рекурсивная ф?
- такая ф является Тьюринг невычислимой


** Игра в усердного бобра
- Построим машину Тьюринга с N+1 состояниями из которых одно halt
- Запустим ее на ленте, содержащей только нули
- Если машина зациклилась навсегда, она проиграла
- Выигрывает та машина, которая напечатает наибольшее количество единиц на ленту и остановится


*** Трудности судейства
- Задача проверки неразрешима
- Еще проще: BB(n) Тьюринг невычислима

 
*** Удивительный факт
- Функция BB(n), как и любая невычислимая функция имеет по определению бесконечною Колмогоровская сложность
- Значит она производит настоящие случайные числа
- Мы просто теоретически не в состоянии написать программу, которая предсказала бы следующее такое число


** Применение к доказательствам
- Была построена машина Тьюринга с 744 состояниями, которая завершает работу если гипотеза Римана неверна
- Была также построена машина Тьюринга с 43 состояниями, которая завершает работу если неверна гипотеза Гольдбаха
- Если бы мы знали BB(43), мы могли бы прогнать эту машину ровно столько шагов и если бы она не завершила работу, это доказало бы гипотезу


* Завершение и напутственные слова (01:13:26)
- c-graduate/coursework/contests


* Problem
- RAMM (08:00)
- TADD (23:15)
- TDIV (31:42)
